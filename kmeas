package java;

public class kmeans {

	public static void main(String[] args) {
		int data[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};	//초기 데이터
		int num_clusters = 3;	//cluster의 개수(k)
		int centroid[][] = new int[][] {	//중심값
			{0, 0, 0},
			{2, 4, 6}	//초기 centroid(임의로 설정)
		};

		getCentroid(data, num_clusters, centroid);

	}
	//중심점 찾기/파라미터 centroid는 이전에 설정한 초기 centroid
	public static int[][] getCentroid(int data[], int num_clusters, int centroid[][]) {

		int distance[][] = new int[num_clusters][data.length];
		int cluster[] = new int[data.length];
		int clusternodecount[] = new int[num_clusters];

		centroid[0] = centroid[1]; //초기 centroid에 현재 centroid값을 저장
		centroid[1] = new int[]{0, 0, 0};

		//새로운 centroid 찾기
		for(int i = 0; i < num_clusters; i++) {
			for(int j = 0; j < data.length; j++) {
				distance[i][j] = Math.abs(data[j] - centroid[0][i]); //각 centroid와 각 데이터 사이의 거리
			}
		}

		for(int j = 0; j < data.length; j++) {
			int smallerDistance = 0;
			if(distance[0][j] < distance[1][j] && distance[0][j] < distance[2][j])
				smallerDistance = 0;
			if(distance[1][j] < distance[0][j] && distance[1][j] < distance[2][j])
				smallerDistance = 1;
			if(distance[2][j] < distance[0][j] && distance[2][j] < distance[1][j])
				smallerDistance = 2;

			centroid[1][smallerDistance] = centroid[1][smallerDistance]+data[j];
			clusternodecount[smallerDistance] = clusternodecount[smallerDistance]+1;
			cluster[j] = smallerDistance;

		}
		
		//새로운 클러스터 출력
		System.out.println("------------------------------");
		System.out.println("<새로운 cluster>");
		for(int i = 0; i < num_clusters; i++) {
			System.out.print("C"+(i+1)+": ");
			for(int m = 0; m < data.length; m++) {
				if(cluster[m] == i) {
					System.out.print(data[m]+" ");
				}

			}
		}
		System.out.println();

		System.out.println("<새로운 centroid>");
		for(int j = 0; j < num_clusters; j++) {
			centroid[1][j] = centroid[1][j]/clusternodecount[j]; //중심점 선택
			System.out.print(centroid[1][j]+" ");

		}
		System.out.println();

		boolean isAchived = true;
		for(int j = 0; j < num_clusters; j++) {
			if(isAchived && centroid[0][j] == centroid[1][j]) {	//centroid가 이전과 같다면
				isAchived = true;	//isAchived = true
				continue;
			}
			isAchived = false;
		}	
		if(!isAchived) {
			getCentroid(data, num_clusters, centroid);	//재귀

		}
		if(isAchived) {	//isAchived = true이면 최종 cluster 출력
			System.out.println("==============================");
			System.out.println("<최종 Cluster>");
			for(int i = 0; i < num_clusters; i++) {
				System.out.print("C"+(i+1)+": ");
				for(int j = 0; j < data.length; j++) {
					if(cluster[j] == i) {
						System.out.print(data[j]+" ");
					}
				}
			}

		}
		return distance;

	}

}
